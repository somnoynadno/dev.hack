version: "3"

services:
  #################
  # Reverse-Proxy #
  #################

  nginx:
    image: nginx:latest
    container_name: nginx
    hostname: nginx
    restart: always
    depends_on:
      - grafana
      - currency_api
      - transaction_api
      - enum_api
      - document_api
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    networks:
      - default
      - nginx_proxy

  nginx-prometheus-exporter:
    image: nginx/nginx-prometheus-exporter:0.8.0
    container_name: nginx_metrics
    entrypoint: ["/usr/bin/exporter", "-nginx.scrape-uri", "http://nginx:8080/stub_status"]
    restart: always
    depends_on:
      - nginx
    ports:
      - 9113:9113
    networks:
      - nginx_proxy

  #################
  # Backend Nodes #
  #################
  
  account_api:
    build: services/Backend/AccountAPI
    container_name: account_api
    ports:
      - 1111:6666
    restart: always
    networks:
      - default
      - nginx_proxy
      - account_network
    environment:
        - POSTGRES_HOST=account_postgres
    depends_on:
        - account_postgres

  bank_account_api:
    build: services/Backend/BankAccountAPI
    container_name: bank_account_api
    ports:
      - 2222:6666
    restart: always
    networks:
      - default
      - nginx_proxy
      - bank_account_network
    environment:
        - POSTGRES_HOST=bank_account_postgres
    depends_on:
        - bank_account_postgres

  currency_api:
    build: services/Backend/CurrencyAPI
    container_name: currency_api
    ports:
      - 6666:6666
    restart: always
    networks:
      - default
      - nginx_proxy
      - currency_network
    environment:
        - REDIS_HOST=currency_redis
    depends_on:
        - currency_redis
  
  document_api:
    build: services/Backend/DocumentAPI
    container_name: document_api
    ports:
      - 7777:7777
    restart: always
    networks:
      - default
      - nginx_proxy
    environment:
      - UPLOAD_FOLDER=/tmp/

  enum_api:
    build: services/Backend/EnumAPI
    container_name: enum_api
    ports:
      - 4444:4444
    restart: always
    networks:
      - default
      - nginx_proxy
    healthcheck:
      test: curl --fail -s -X GET http://localhost:4444/api/ping || exit 1
      interval: 5m
      timeout: 2s
      retries: 3

  transaction_api:
    build: services/Backend/TransactionAPI
    container_name: backend
    ports:
      - 5555:5555
    restart: always
    networks:
      - default

  #############
  # Databases #
  #############

  currency_redis:
    image: redis
    restart: "always"
    networks:
      - currency_network
    command: [ "redis-server", "--appendonly", "yes" ]
    volumes:
      - redis_data:/data

  transaction_mongo:
    image: mongo
    container_name: mongo
    restart: always
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_DATABASE: transactions
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: mongo
    volumes:
      - mongo_data:/data/db
    networks:
      nginx_proxy:
  
  account_postgres:
    image: postgres:12
    expose:
      - 5432
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=account_db
      - POSTGRES_USER=postgres
    volumes:
      - account_db_data:/var/lib/postgresql/data
    restart: always
    networks:
      - account_network

  bank_account_postgres:
    image: postgres:12
    expose:
      - 5432
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=bank_account_db
      - POSTGRES_USER=postgres
    volumes:
      - bank_account_db_data:/var/lib/postgresql/data
    restart: always
    networks:
      - bank_account_network

  #################
  # Frontend Nodes #
  #################

  web_panel:
    build: services/Frontend/WebPanel
    container_name: web_panel
    ports:
      - 8030:3000
    restart: always
    networks:
      - default
      - nginx_proxy

  ###################
  # Event Streaming #
  ###################

  zookeeper:
    image: 'bitnami/zookeeper:latest'
    ports:
      - 2181:2181
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: 'bitnami/kafka:latest'
    ports:
      - 9092:9092
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://95.182.120.116:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper

  ##############
  # Monitoring #
  ##############

  prometheus:
    image: prom/prometheus:v2.1.0
    hostname: prometheus
    restart: always
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9080:9090
    networks:
      - default
      - nginx_proxy

  grafana:
    image: grafana/grafana:7.5.7-ubuntu
    container_name: grafana
    hostname: grafana
    ports:
      - 3000:3000
    restart: always
    depends_on:
      - kafka
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - nginx_proxy


volumes:
  grafana_data:
  prometheus_data:
  redis_data:
  mongo_data:
  account_db_data:
  bank_account_db_data:


networks:
  default:
  nginx_proxy:
    internal: true
  currency_network:
    internal: true
  account_network:
    internal: true
  bank_account_network:
    internal: true